# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cliente.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets  import QApplication, QWidget, QFileDialog, QTableWidget ,QTableWidgetItem

### Libs diversas ###
import mysql.connector
import pandas as pd

### Import froms sistemas ###
from dadosCliente import Ui_fromDadosCliente

### Import das variaveis de controles ###
import variavelControle

### Variaveis de controle com o banco de dados ###
host = variavelControle.host
user = variavelControle.user
password = variavelControle.password
database = variavelControle.database

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(521, 379)
        self.bt_adicionar = QtWidgets.QPushButton(Form)
        self.bt_adicionar.setGeometry(QtCore.QRect(0, 0, 61, 61))
        self.bt_adicionar.setStyleSheet("")
        self.bt_adicionar.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Icons/adicionar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_adicionar.setIcon(icon)
        self.bt_adicionar.setIconSize(QtCore.QSize(50, 50))
        self.bt_adicionar.setObjectName("bt_adicionar")
        self.bt_alterar = QtWidgets.QPushButton(Form)
        self.bt_alterar.setGeometry(QtCore.QRect(60, 0, 61, 61))
        self.bt_alterar.setStyleSheet("")
        self.bt_alterar.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../Icons/alterar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_alterar.setIcon(icon1)
        self.bt_alterar.setIconSize(QtCore.QSize(50, 50))
        self.bt_alterar.setObjectName("bt_alterar")
        self.bt_consultar = QtWidgets.QPushButton(Form)
        self.bt_consultar.setGeometry(QtCore.QRect(120, 0, 61, 61))
        self.bt_consultar.setStyleSheet("")
        self.bt_consultar.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../Icons/consultar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_consultar.setIcon(icon2)
        self.bt_consultar.setIconSize(QtCore.QSize(50, 50))
        self.bt_consultar.setObjectName("bt_consultar")
        self.bt_excluir = QtWidgets.QPushButton(Form)
        self.bt_excluir.setGeometry(QtCore.QRect(180, 0, 61, 61))
        self.bt_excluir.setStyleSheet("")
        self.bt_excluir.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../Icons/excluir.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_excluir.setIcon(icon3)
        self.bt_excluir.setIconSize(QtCore.QSize(50, 50))
        self.bt_excluir.setObjectName("bt_excluir")
        self.bt_retornar = QtWidgets.QPushButton(Form)
        self.bt_retornar.setGeometry(QtCore.QRect(460, 0, 61, 61))
        self.bt_retornar.setStyleSheet("")
        self.bt_retornar.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../Icons/retornar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_retornar.setIcon(icon4)
        self.bt_retornar.setIconSize(QtCore.QSize(50, 50))
        self.bt_retornar.setObjectName("bt_retornar")
        self.bt_pesquisar = QtWidgets.QPushButton(Form)
        self.bt_pesquisar.setGeometry(QtCore.QRect(400, 80, 21, 21))
        self.bt_pesquisar.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../Icons/pesquisar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisar.setIcon(icon5)
        self.bt_pesquisar.setObjectName("bt_pesquisar")
        self.tb_cliente = QtWidgets.QTableWidget(Form)
        self.tb_cliente.setGeometry(QtCore.QRect(10, 110, 501, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tb_cliente.setFont(font)
        self.tb_cliente.setObjectName("tb_cliente")
        self.tb_cliente.setColumnCount(4)
        self.tb_cliente.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tb_cliente.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_cliente.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_cliente.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_cliente.setHorizontalHeaderItem(3, item)
        self.lb_nomeCliente = QtWidgets.QLabel(Form)
        self.lb_nomeCliente.setGeometry(QtCore.QRect(10, 79, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_nomeCliente.setFont(font)
        self.lb_nomeCliente.setObjectName("lb_nomeCliente")
        self.txt_nomeCliente = QtWidgets.QLineEdit(Form)
        self.txt_nomeCliente.setGeometry(QtCore.QRect(100, 80, 291, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txt_nomeCliente.setFont(font)
        self.txt_nomeCliente.setObjectName("txt_nomeCliente")
        self.bt_pesquisarGeral = QtWidgets.QPushButton(Form)
        self.bt_pesquisarGeral.setGeometry(QtCore.QRect(430, 80, 21, 21))
        self.bt_pesquisarGeral.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../Icons/filtro.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pesquisarGeral.setIcon(icon6)
        self.bt_pesquisarGeral.setObjectName("bt_pesquisarGeral")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.bt_adicionar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_adicionar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_alterar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_alterar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_consultar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_consultar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_excluir.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_excluir.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_retornar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_retornar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        item = self.tb_cliente.horizontalHeaderItem(0)
        item.setText(_translate("Form", "ID"))
        item = self.tb_cliente.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Nome"))
        item = self.tb_cliente.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Telefone"))
        item = self.tb_cliente.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Cidade"))
        self.lb_nomeCliente.setText(_translate("Form", "Nome Cliente:"))

        ### BOTÕES SISTEMAS ###
        self.bt_retornar.clicked.connect(lambda: self.sairTela(Form))
        if variavelControle.tela == 'cliente':
            self.bt_pesquisarGeral.clicked.connect(self.consultarGeral)
            self.bt_pesquisar.clicked.connect(self.pesquisarCliente)
            self.bt_adicionar.clicked.connect(self.cadastrarCliente)
            self.bt_consultar.clicked.connect(self.consultarCliente)
            self.bt_alterar.clicked.connect(self.alterarCliente)
            self.bt_excluir.clicked.connect(self.excluirCliente)
        elif variavelControle.tela == 'fornecedor':
            self.bt_pesquisarGeral.clicked.connect(self.consultarGeralFornecedor)
            self.bt_pesquisar.clicked.connect(self.pesquisarFornecedor)
            self.bt_adicionar.clicked.connect(self.cadastrarFornecedor)
            self.bt_consultar.clicked.connect(self.consultarFornecedor)
            self.bt_alterar.clicked.connect(self.alterarFornecedor)
            self.bt_excluir.clicked.connect(self.excluirFornecedor)
        
        
    ### FUNÇÕES SISTEMAS ###
    ## Fechar tela do cliente ##
    def sairTela(self, Form):
        Form.close()
    #_______________________________________CLIENTE_____________________________________________________
    ## Consulta tabela cliente geral ##
    def consultarGeral(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()

        mycursor.execute('SELECT * FROM cliente')
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df

        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()
    
    
    ### Pesquisar por nome do Cliente ###
    def pesquisarCliente(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()
        nomeConsulta = self.txt_nomeCliente.text()
        consultaSQL = "SELECT * FROM cliente WHERE nome LIKE '" + nomeConsulta + "%'"
        mycursor.execute(consultaSQL)
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df

        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()

    ## Função cadastrar cliente
    def cadastrarCliente(self):
        variavelControle.tipoTelaDadosCliente = 'incluir'
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função consultar cliente
    def consultarCliente(self):
        # Tipo tela dados cliente #
        variavelControle.tipoTelaDadosCliente = 'consultar'
        # ID cliente para consulta #
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        variavelControle.idConsulta = item.text()
        # Abertura da tela consultar cliente #
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função alterar cliente
    def alterarCliente(self):
        # Tipo tela dados cliente #
        variavelControle.tipoTelaDadosCliente = 'alterar'
        # ID cliente para consulta #
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        variavelControle.idConsulta = item.text()
        # Abertura da tela consultar cliente #
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função excluir cliente
    def excluirCliente(self):
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        idCliente = item.text()
        # Conexão com Banco de Dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()
        sql = "DELETE FROM cliente WHERE IdCliente = '" + idCliente + "'"
        mycursor.execute(sql)
        mydb.commit()
        # Atualizar tabela com consulta completa #
        mycursor.execute('SELECT * FROM cliente')
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df
        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()
        
    ###_________________________________________________FORNECEDOR_____________________________________________________
    ### Consulta Geral dos Fornecedores ###
    def consultarGeralFornecedor(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()

        mycursor.execute('SELECT * FROM fornecedor')
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df

        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()

    ### Pesquisar por nome do Fornecedor ###
    def pesquisarFornecedor(self):
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()
        nomeConsulta = self.txt_nomeCliente.text()
        consultaSQL = "SELECT * FROM fornecedor WHERE nome LIKE '" + nomeConsulta + "%'"
        mycursor.execute(consultaSQL)
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df

        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()

    ## Função cadastrar Fornecedor
    def cadastrarFornecedor(self):
        variavelControle.tipoTelaDadosFornecedor = 'incluir'
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função consultar fornecedor
    def consultarFornecedor(self):
        # Tipo tela dados fornecedor #
        variavelControle.tipoTelaDadosFornecedor = 'consultar'
        # ID cliente para consulta #
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        variavelControle.idConsulta = item.text()
        # Abertura da tela consultar cliente #
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função alterar fornecedor
    def alterarFornecedor(self):
        # Tipo tela dados cliente #
        variavelControle.tipoTelaDadosFornecedor = 'alterar'
        # ID cliente para consulta #
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        variavelControle.idConsulta = item.text()
        # Abertura da tela consultar cliente #
        self.fromDadosCliente = QtWidgets.QWidget()
        self.ui = Ui_fromDadosCliente()
        self.ui.setupUi(self.fromDadosCliente)
        self.fromDadosCliente.show()

    ## Função excluir fornecedor
    def excluirFornecedor(self):
        line = self.tb_cliente.currentRow() # qual a linha que estou no momento
        item = self.tb_cliente.item(line, 0)
        idCliente = item.text()
        # Conexão com Banco de Dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )
        mycursor = mydb.cursor()
        sql = "DELETE FROM fornecedor WHERE IdFornecedor = '" + idCliente + "'"
        mycursor.execute(sql)
        mydb.commit()
        # Atualizar tabela com consulta completa #
        mycursor.execute('SELECT * FROM fornecedor')
        myresult = mycursor.fetchall()
        df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
        self.all_data = df
        # Carrega o arquivo na tabela tb_cliente #
        numRows = len(self.all_data.index)
        self.tb_cliente.setColumnCount(len(self.all_data.columns))
        self.tb_cliente.setRowCount(numRows)
        self.tb_cliente.setHorizontalHeaderLabels(self.all_data.columns)

        for i in range(numRows):
            for j in range(len(self.all_data.columns)):
                self.tb_cliente.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j])))


        self.tb_cliente.resizeColumnsToContents()
        self.tb_cliente.resizeRowsToContents()

        mycursor.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
