# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dadosCliente.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

### Imports sistemas ###
import mysql.connector
import pandas as pd

### Import das variaveis de controles ###
import variavelControle

### Variaveis de controle com o banco de dados ###
host = variavelControle.host
user = variavelControle.user
password = variavelControle.password
database = variavelControle.database

class Ui_fromDadosCliente(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(421, 244)
        self.lb_nome = QtWidgets.QLabel(Form)
        self.lb_nome.setGeometry(QtCore.QRect(50, 40, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_nome.setFont(font)
        self.lb_nome.setObjectName("lb_nome")
        self.txt_nome = QtWidgets.QLineEdit(Form)
        self.txt_nome.setGeometry(QtCore.QRect(110, 40, 231, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txt_nome.setFont(font)
        self.txt_nome.setText("")
        self.txt_nome.setObjectName("txt_nome")
        self.lb_telefone = QtWidgets.QLabel(Form)
        self.lb_telefone.setGeometry(QtCore.QRect(50, 70, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_telefone.setFont(font)
        self.lb_telefone.setObjectName("lb_telefone")
        self.txt_telefone = QtWidgets.QLineEdit(Form)
        self.txt_telefone.setGeometry(QtCore.QRect(110, 70, 231, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txt_telefone.setFont(font)
        self.txt_telefone.setText("")
        self.txt_telefone.setObjectName("txt_telefone")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(50, 100, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.txt_cidade = QtWidgets.QLineEdit(Form)
        self.txt_cidade.setGeometry(QtCore.QRect(110, 100, 231, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txt_cidade.setFont(font)
        self.txt_cidade.setText("")
        self.txt_cidade.setObjectName("txt_cidade")
        self.bt_cancelar = QtWidgets.QPushButton(Form)
        self.bt_cancelar.setGeometry(QtCore.QRect(140, 150, 61, 71))
        self.bt_cancelar.setStyleSheet("")
        self.bt_cancelar.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Icons/cancelar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_cancelar.setIcon(icon)
        self.bt_cancelar.setIconSize(QtCore.QSize(50, 50))
        self.bt_cancelar.setObjectName("bt_cancelar")
        self.bt_cadastrar = QtWidgets.QPushButton(Form)
        self.bt_cadastrar.setGeometry(QtCore.QRect(240, 150, 61, 71))
        self.bt_cadastrar.setStyleSheet("")
        self.bt_cadastrar.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../Icons/cadastrar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_cadastrar.setIcon(icon1)
        self.bt_cadastrar.setIconSize(QtCore.QSize(50, 50))
        self.bt_cadastrar.setObjectName("bt_cadastrar")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.lb_nome.setText(_translate("Form", "Nome:"))
        self.lb_telefone.setText(_translate("Form", "Telefone:"))
        self.label_3.setText(_translate("Form", "Cidade:"))
        self.bt_cancelar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_cancelar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_cadastrar.setToolTip(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_cadastrar.setWhatsThis(_translate("Form", "<html><head/><body><p><br/></p></body></html>"))

        ### BOTÕES SISTEMAS ###
        self.bt_cancelar.clicked.connect(lambda: self.cancelarCadastro(Form))
        if variavelControle.tipoTelaDadosCliente == 'incluir':
            self.bt_cadastrar.clicked.connect(lambda: self.cadastrarCliente(Form))
        elif variavelControle.tipoTelaDadosFornecedor == 'incluir':
            self.bt_cadastrar.clicked.connect(lambda: self.cadastrarFornecedor(Form))
        if variavelControle.tipoTelaDadosCliente == 'alterar':
            self.bt_cadastrar.clicked.connect(lambda: self.alterarCliente(Form))
        elif variavelControle.tipoTelaDadosFornecedor == 'alterar':
            self.bt_cadastrar.clicked.connect(lambda: self.alterarFornecedor(Form))
       
       ###______________________________________________CLIENTE___________________________________________
        ### Condições da tela ###
        ## Tipo da tela ##
        if variavelControle.tipoTelaDadosCliente == 'incluir':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
        elif variavelControle.tipoTelaDadosCliente == 'consultar':
            self.txt_nome.setEnabled(False)
            self.txt_telefone.setEnabled(False)
            self.txt_cidade.setEnabled(False)
            self.bt_cadastrar.setEnabled(False)
            # Conexão com o banco de dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE idCliente = '" + variavelControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # COnverte resultados DB para DataFrame
            df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Seta variaáveis na tela do sistema #
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
        elif variavelControle.tipoTelaDadosCliente == 'alterar':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
            # Conexão com o banco de dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE idCliente = '" + variavelControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # COnverte resultados DB para DataFrame
            df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Seta variaáveis na tela do sistema #
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
    #______________________________________FORNECEDOR____________________________________________#
        ## Tipo da tela do Fornecedor##
        if variavelControle.tipoTelaDadosFornecedor == 'incluir':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
        elif variavelControle.tipoTelaDadosFornecedor == 'consultar':
            self.txt_nome.setEnabled(False)
            self.txt_telefone.setEnabled(False)
            self.txt_cidade.setEnabled(False)
            self.bt_cadastrar.setEnabled(False)
            # Conexão com o banco de dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM fornecedor WHERE idFornecedor = '" + variavelControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # COnverte resultados DB para DataFrame
            df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Seta variaáveis na tela do sistema #
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
        elif variavelControle.tipoTelaDadosFornecedor == 'alterar':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
            # Conexão com o banco de dados #
            mydb = mysql.connector.connect(
                host = host,
                user = user,
                password = password,
                database = database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM fornecedor WHERE idFornecedor = '" + variavelControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()
            # COnverte resultados DB para DataFrame
            df = pd.DataFrame(myresult, columns= ['ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Seta variaáveis na tela do sistema #
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)
    #_______________________________________________________________________________________________________#
    
    #------------------------------------------------------FUNÇÃO CLIENTE ----------------------------------#
    ### Funções sistemas ###
    ## Cadastrar Cliente##
    def cadastrarCliente(self, Form):
        nomeCliente = self.txt_nome.text()
        telefone = self.txt_telefone.text()
        cidade = self.txt_cidade.text()
        # abrir nossa conexão com banco de dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )

        mycursor = mydb.cursor()

        sql = "INSERT INTO cliente (Nome, Telefone, Cidade) values (%s, %s, %s)"
        val = (nomeCliente, telefone, cidade)
        mycursor.execute(sql, val)

        mydb.commit()
        mycursor.close()
        # limpar os dados que foram escrito na tela
        self.txt_nome.setText("")
        self.txt_telefone.setText("")
        self.txt_cidade.setText("")
        Form.close()
   
    ### Alterar Cliente ##
    def alterarCliente(self, Form):
        nomeCliente = self.txt_nome.text()
        telefone = self.txt_telefone.text()
        cidade = self.txt_cidade.text()
        # abrir nossa conexão com banco de dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )

        mycursor = mydb.cursor()

        sql = "UPDATE cliente SET Nome = '" + nomeCliente + "', Telefone = '" + telefone + "', Cidade = '" + cidade + "' WHERE IdCliente = '" + variavelControle.idConsulta + "'"
        mycursor.execute(sql)
        mydb.commit()
        mycursor.close()
        Form.close()

    #-_____________________________________________________________________#

    ## Cadastrar Fornecedor##
    def cadastrarFornecedor(self, Form):
        nomeFornecedor = self.txt_nome.text()
        telefone = self.txt_telefone.text()
        cidade = self.txt_cidade.text()
        # abrir nossa conexão com banco de dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )

        mycursor = mydb.cursor()

        sql = "INSERT INTO fornecedor (Nome, Telefone, Cidade) values (%s, %s, %s)"
        val = (nomeFornecedor, telefone, cidade)
        mycursor.execute(sql, val)

        mydb.commit()
        mycursor.close()
        # limpar os dados que foram escrito na tela
        self.txt_nome.setText("")
        self.txt_telefone.setText("")
        self.txt_cidade.setText("")
        Form.close()

    ### Alterar Fornecedor ##
    def alterarFornecedor(self, Form):
        nomeCliente = self.txt_nome.text()
        telefone = self.txt_telefone.text()
        cidade = self.txt_cidade.text()
        # abrir nossa conexão com banco de dados
        mydb = mysql.connector.connect(
            host = host,
            user = user,
            password = password,
            database = database
        )

        mycursor = mydb.cursor()

        sql = "UPDATE fornecedor SET Nome = '" + nomeCliente + "', Telefone = '" + telefone + "', Cidade = '" + cidade + "' WHERE IdFornecedor = '" + variavelControle.idConsulta + "'"
        mycursor.execute(sql)
        mydb.commit()
        mycursor.close()
        Form.close()

    ## Fechar tela do cliente ##
    def cancelarCadastro(self, Form):
        Form.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    fromDadosCliente = QtWidgets.QWidget()
    ui = Ui_fromDadosCliente()
    ui.setupUi(fromDadosCliente)
    fromDadosCliente.show()
    sys.exit(app.exec_())
